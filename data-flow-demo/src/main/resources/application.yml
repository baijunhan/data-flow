#spring:
#  kafka:
#    consumer:
#      bootstrap-servers:
#      group-id: ${core.system.kafka.topic}
#      enable-auto-commit: false
#      auto-commit-interval: 1000ms
#      auto-offset-reset: earliest
#      max-poll-records: 20
#      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      value-deserializer:
#    listener:
#      ack-mode: manual
#
logging:
  config: classpath:logback-spring-${spring.profiles.active}.xml
server:
  port: 8081
  servlet:
    context-path: /data-flow
management:
  endpoint:
    health:
      show-details: always
  endpoints:
    web:
      exposure:
        include: '*'
  server:
    port: ${server.port}
    servlet:
      context-path: ${server.servlet.context-path}
canal:
  listen-table-config:
    # 需要监听处理数据库中的表, 表名可用正则表达式
    - schema: (?i)abak
      tables:
        - (?i)lm_loan
        - (?i)lm_pm_shd
        - (?i)lm_setlmt_log
spring:
  servlet:
    multipart:
      max-file-size: 1GB
      max-request-size: 1GB
  h2:
    console:
      enabled: true
  redis:
    port: 6380
#    password: 58603924715
#    host: 127.0.0.1
  profiles:
    active: FAT
#  kafka:
#    bootstrap-servers: localhost:9092
#    listener:
#      ack-mode: manual
#      concurrency: 1
#    consumer:
#      group-id: test
#      value-deserializer: ink.andromeda.dataflow.util.kafka.serialize.OGGMessageDeserializer
data-flow:
  enable: true
#  mq-instances:
#    - name: to_kafka
#      type: kafka
#      properties:
#        bootstrap-servers: localhost:9092
#        group-id: data-flow
#        key-serializer: org.apache.kafka.common.serialization.StringSerializer
#        value-serializer: org.apache.kafka.common.serialization.StringSerializer
#    - name: to_rocket
#      type: rocket
#      properties:
#        name-serv: localhost:8088
#        group-id: test

multi-data-source:
  data-source:
    hikari:
      - pool-name: master
        driver-class-name: org.h2.Driver
        jdbc-url: jdbc:h2:mem:data;MODE=MYSQL;DATABASE_TO_LOWER=TRUE
        connection-test-query: SELECT 1
        validation-timeout: 18800
      - pool-name: op_log
        driver-class-name: org.h2.Driver
        jdbc-url: jdbc:h2:mem:op_log_db;MODE=MYSQL;DATABASE_TO_LOWER=TRUE
        connection-test-query: SELECT 1
        validation-timeout: 18800
      #        connection-init-sql: "
      #          CREATE TABLE purchase_log (
      #              id INT PRIMARY KEY AUTO_INCREMENT COMMENT 'id主键',
      #              book_id INT NOT NULL COMMENT '书籍名称',
      #              customer_id INT NOT NULL COMMENT '用户id',
      #              book_name VARCHAR(128) NOT NULL COMMENT '书籍名称',
      #              customer_account_name VARCHAR(64) NOT NULL COMMENT '购买时的账户名',
      #              count INT NOT NULL COMMENT '数量',
      #              should_amount DECIMAL NOT NULL COMMENT '应付金额',
      #              paid_amount DECIMAL NOT NULL COMMENT '实付金额',
      #              create_time DATETIME NOT NULL COMMENT '创建时间'
      #          );
      #        "
      - pool-name: origin
        driver-class-name: org.h2.Driver
        jdbc-url: jdbc:h2:mem:origin_db;MODE=MYSQL;DATABASE_TO_LOWER=TRUE
        connection-test-query: SELECT 1
        validation-timeout: 18800
    #        connection-init-sql: "
    #          CREATE TABLE origin_order(
    #              id INT PRIMARY KEY AUTO_INCREMENT ,
    #              customer_id INT NOT NULL ,
    #              count INT NOT NULL ,
    #              amount DECIMAL NOT NULL ,
    #              pay_time DATETIME NOT NULL,
    #              create_time DATETIME NOT NULL,
    #              outer_create_time DATETIME
    #          )
    #        "
    init-sql-script:
      master: classpath:h2/init_schema_business_db.sql
      op_log: classpath:h2/init_schema_op_log_db.sql
      origin: classpath:h2/init_schema_origin_db.sql
